pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'riajul98/my-flask-app:latest'
        WORK_DIR = '/home/ec2-user/CI-CD-Pipeline-for-Containerized-App/app'
        AWS_REGION = 'eu-west-1' // Set your AWS region
    }
    stages {
        stage('Build Docker Image') {
            steps {
                dir("${WORK_DIR}") { // Change to the correct directory
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub using Jenkins credentials
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                        sh 'docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS'
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh 'docker push ${DOCKER_IMAGE}'
            }
        }

        stage('Setup AWS CLI') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_keys']]) {
                    sh '''
                    # Configure AWS CLI with injected credentials
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set default.region $AWS_REGION
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                    mkdir -p /var/lib/jenkins/.kube
                    cp "$KUBECONFIG_FILE" /var/lib/jenkins/.kube/config
                    chmod 600 /var/lib/jenkins/.kube/config

                    # Validate Kubernetes connection
                    kubectl get nodes

                    # Apply deployment
                    kubectl apply -f /home/ec2-user/CI-CD-Pipeline-for-Containerized-App/kubernetes/deployment.yml
                    '''
                }
            }
        }
    }
}
